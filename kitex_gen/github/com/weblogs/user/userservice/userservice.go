// Code generated by Kitex v0.5.0. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "github.com/weblogs/kitex_gen/github/com/weblogs/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateUser": kitex.NewMethodInfo(createUserHandler, newUserServiceCreateUserArgs, newUserServiceCreateUserResult, false),
		"DeleteUser": kitex.NewMethodInfo(deleteUserHandler, newUserServiceDeleteUserArgs, newUserServiceDeleteUserResult, false),
		"SignIn":     kitex.NewMethodInfo(signInHandler, newUserServiceSignInArgs, newUserServiceSignInResult, false),
		"SignOut":    kitex.NewMethodInfo(signOutHandler, newUserServiceSignOutArgs, newUserServiceSignOutResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.0",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceCreateUserArgs)
	realResult := result.(*user.UserServiceCreateUserResult)
	success, err := handler.(user.UserService).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCreateUserArgs() interface{} {
	return user.NewUserServiceCreateUserArgs()
}

func newUserServiceCreateUserResult() interface{} {
	return user.NewUserServiceCreateUserResult()
}

func deleteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceDeleteUserArgs)
	realResult := result.(*user.UserServiceDeleteUserResult)
	success, err := handler.(user.UserService).DeleteUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceDeleteUserArgs() interface{} {
	return user.NewUserServiceDeleteUserArgs()
}

func newUserServiceDeleteUserResult() interface{} {
	return user.NewUserServiceDeleteUserResult()
}

func signInHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceSignInArgs)
	realResult := result.(*user.UserServiceSignInResult)
	success, err := handler.(user.UserService).SignIn(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceSignInArgs() interface{} {
	return user.NewUserServiceSignInArgs()
}

func newUserServiceSignInResult() interface{} {
	return user.NewUserServiceSignInResult()
}

func signOutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceSignOutArgs)
	realResult := result.(*user.UserServiceSignOutResult)
	success, err := handler.(user.UserService).SignOut(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceSignOutArgs() interface{} {
	return user.NewUserServiceSignOutArgs()
}

func newUserServiceSignOutResult() interface{} {
	return user.NewUserServiceSignOutResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, req *user.CreateUserRequest) (r *user.CreateUserResponse, err error) {
	var _args user.UserServiceCreateUserArgs
	_args.Req = req
	var _result user.UserServiceCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUser(ctx context.Context, req *user.DeleteUserRequest) (r *user.DeleteUserResponse, err error) {
	var _args user.UserServiceDeleteUserArgs
	_args.Req = req
	var _result user.UserServiceDeleteUserResult
	if err = p.c.Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SignIn(ctx context.Context, req *user.SignInRequest) (r *user.SignInResponse, err error) {
	var _args user.UserServiceSignInArgs
	_args.Req = req
	var _result user.UserServiceSignInResult
	if err = p.c.Call(ctx, "SignIn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SignOut(ctx context.Context, req *user.SignOutRequest) (r *user.SignOutResponse, err error) {
	var _args user.UserServiceSignOutArgs
	_args.Req = req
	var _result user.UserServiceSignOutResult
	if err = p.c.Call(ctx, "SignOut", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
